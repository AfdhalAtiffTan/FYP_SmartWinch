from GUI import Ui_MainWindow #Generated by Qt Designer
from PyQt4 import QtCore, QtGui

import serial
import time
import math

import minimalmodbus


class StartQT4(QtGui.QMainWindow):
    instrument = minimalmodbus
    
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)		    
        instrument = minimalmodbus
        ##################Buttons#######################################################################
        self.ui.pushButton_1.clicked.connect(self.emergency_stop)
        self.ui.pushButton_2.clicked.connect(self.X_Plus)
        self.ui.pushButton_3.clicked.connect(self.X_Minus)
        self.ui.pushButton_4.clicked.connect(self.Y_Plus)
        self.ui.pushButton_5.clicked.connect(self.Y_Minus)
        self.ui.pushButton_10.clicked.connect(self.Z_Plus)
        self.ui.pushButton_11.clicked.connect(self.Z_Minus)
        self.ui.pushButton_12.clicked.connect(self.connect)
        self.ui.pushButton_13.clicked.connect(self.disconnect)
        self.ui.pushButton_14.clicked.connect(self.HomeAll_Coordinate)
        self.ui.pushButton_15.clicked.connect(self.HomeAll_Length)
        self.ui.pushButton_18.clicked.connect(self.WinchA_Extrude)
        self.ui.pushButton_19.clicked.connect(self.WinchA_Retract)
        self.ui.pushButton_20.clicked.connect(self.WinchB_Extrude)
        self.ui.pushButton_21.clicked.connect(self.WinchB_Retract)
        self.ui.pushButton_22.clicked.connect(self.WinchC_Extrude)
        self.ui.pushButton_23.clicked.connect(self.WinchC_Retract)
        self.ui.pushButton_24.clicked.connect(self.WinchD_Extrude)
        self.ui.pushButton_25.clicked.connect(self.WinchD_Retract)
        self.ui.pushButton_26.clicked.connect(self.WinchA_Home)
        self.ui.pushButton_27.clicked.connect(self.WinchB_Home)
        self.ui.pushButton_28.clicked.connect(self.WinchC_Home)
        self.ui.pushButton_29.clicked.connect(self.WinchD_Home)
        self.ui.pushButton_30.clicked.connect(self.WinchB_ReadMonitor1)
        self.ui.pushButton_31.clicked.connect(self.WinchA_ReadMonitor1)
        self.ui.pushButton_32.clicked.connect(self.WinchA_Goto)
        self.ui.pushButton_33.clicked.connect(self.WinchA_Read_PID)
        self.ui.pushButton_34.clicked.connect(self.Waypoint_Goto)
        self.ui.pushButton_35.clicked.connect(self.WinchA_Reset)
        self.ui.pushButton_36.clicked.connect(self.WinchB_Goto)
        self.ui.pushButton_37.clicked.connect(self.WinchB_Read_PID)
        self.ui.pushButton_38.clicked.connect(self.WinchB_Reset)
        self.ui.pushButton_39.clicked.connect(self.WinchC_Goto)
        self.ui.pushButton_40.clicked.connect(self.WinchC_Read_PID)
        self.ui.pushButton_41.clicked.connect(self.WinchC_Reset)
        self.ui.pushButton_42.clicked.connect(self.WinchD_Goto)
        self.ui.pushButton_43.clicked.connect(self.WinchD_Read_PID)
        self.ui.pushButton_44.clicked.connect(self.Read_Target_Length)
        self.ui.pushButton_45.clicked.connect(self.Read_Target_Coordinate)
        self.ui.pushButton_46.clicked.connect(self.WinchD_Reset)
        self.ui.pushButton_47.clicked.connect(self.WinchA_Write_PID)
        self.ui.pushButton_48.clicked.connect(self.WinchB_Write_PID) 
        self.ui.pushButton_49.clicked.connect(self.WinchC_Write_PID) 
        self.ui.pushButton_50.clicked.connect(self.WinchD_Write_PID) 
        self.ui.pushButton_51.clicked.connect(self.WinchC_ReadMonitor1)
        self.ui.pushButton_52.clicked.connect(self.Write_Field_Settings)
        self.ui.pushButton_53.clicked.connect(self.Write_Motion_Settings)
        self.ui.pushButton_54.clicked.connect(self.WinchD_ReadMonitor1)
        ##################Buttons#######################################################################

    def connect(self, text):        
        try:
            self.instrument = minimalmodbus.Instrument(str(self.ui.lineEdit.text()), 1)
        except:
            print "port already open"

        self.instrument.serial.baudrate = 9600   # Baud
        self.instrument.serial.bytesize = 8
        self.instrument.serial.parity   = serial.PARITY_NONE
        self.instrument.serial.stopbits = 1
        self.instrument.serial.timeout  = 0.5   # seconds

        self.instrument.address = 1    # this is the slave address number
        self.instrument.mode = minimalmodbus.MODE_RTU   # rtu or ascii mode
        
        try:
            self.instrument.serial.open()
        except:
            print "port already open"
        
        self.ui.statusbar.showMessage('Connected') 
        print str(self.instrument) + '\n\n'

        
    def disconnect(self):
        self.ui.statusbar.showMessage('Not Connected') 
        try:
            self.instrument.serial.close()
        except:
            print "port already closed"
        print str(self.instrument) + '\n\n'

    def emergency_stop(self):
        print 'hello world!'
		
    def WinchA_Extrude(self):
        try:
            self.instrument.address = 1             
            self.instrument.write_register(6, int(self.ui.lineEdit_2.text()), 0, signed=True)
        except IOError:
            print("Failed to read from instrument")

    def WinchB_Extrude(self):
        print 'hello world!'
		
    def WinchC_Extrude(self):
        print 'hello world!'

    def WinchD_Extrude(self):
        print 'hello world!'
		
    def WinchA_Retract(self):
        try:
            self.instrument.address = 1             
            self.instrument.write_register(6, -1*int(self.ui.lineEdit.text()), 0, signed=True)
        except IOError:
            print("Failed to read from instrument")

    def WinchB_Retract(self):
        print 'hello world!'
		
    def WinchC_Retract(self):
        print 'hello world!'

    def WinchD_Retract(self):
        print 'hello world!'
		
    def WinchA_Home(self):
        print 'hello world!'	

    def WinchB_Home(self):
        print 'hello world!'
		
    def WinchC_Home(self):
        print 'hello world!'

    def WinchD_Home(self):
        print 'hello world!'
		
    def WinchA_Goto(self):
        print 'hello world!'

    def WinchB_Goto(self):
        print 'hello world!'
		
    def WinchC_Goto(self):
        print 'hello world!'

    def WinchD_Goto(self):
        print 'hello world!'
		
    def WinchA_Reset(self):
        print 'hello world!'	

    def WinchB_Reset(self):
        print 'hello world!'
		
    def WinchC_Reset(self):
        print 'hello world!'

    def WinchD_Reset(self):
        print 'hello world!'
		
    def HomeAll_Length(self):
        print 'hello world!'

    def HomeAll_Coordinate(self):
        print 'hello world!'
		
    def Waypoint_Goto(self):
        print 'hello world!'

    def X_Plus(self):
        print 'hello world!'
		
    def Y_Plus(self):
        print 'hello world!'	

    def Z_Plus(self):
        print 'hello world!'
		
    def X_Minus(self):
        print 'hello world!'

    def Y_Minus(self):
        print 'hello world!'
		
    def Z_Minus(self):
        print 'hello world!'
		
    def Read_Target_Length(self):
        print 'hello world!'

    def Read_Target_Coordinate(self):
        print 'hello world!'
		
    def WinchA_ReadMonitor1(self):
        print 'hello world!'	

    def WinchB_ReadMonitor1(self):
        print 'hello world!'
		
    def WinchC_ReadMonitor1(self):
        print 'hello world!'

    def WinchD_ReadMonitor1(self):
        print 'hello world!'
		
    def WinchA_Read_PID(self):
        print 'hello world!'

    def WinchB_Read_PID(self):
        print 'hello world!'
		
    def WinchC_Read_PID(self):
        print 'hello world!'

    def WinchD_Read_PID(self):
        print 'hello world!'
		
    def WinchA_Write_PID(self):
        print 'hello world!'	

    def WinchB_Write_PID(self):
        print 'hello world!'
		
    def WinchC_Write_PID(self):
        print 'hello world!'

    def WinchD_Write_PID(self):
        print 'hello world!'
		
    def Write_Field_Settings(self):
        print 'hello world!'

    def Write_Motion_Settings(self):
        print 'hello world!'		


if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    MainWindow = StartQT4()
    MainWindow.show()
    sys.exit(app.exec_())

#maxTorque = str(self.ui.lineEdit_1.text())
#self.ui.lineEdit_5.setText(str(minTensionN))
