/*
 * interrupt_handlers.c
 *
 *  Created on: 10 Feb 2018
 *      Author: AfdhalAtiffTan
 */

#include "interrupt_handlers.h"

//temporary pid
/*
volatile float setpoint = 7680.0;
volatile float kp=0.0,ki=0.0,kd=700;
volatile float error=0.0, input_previous=0.0, error_integrated=0.0, input_differentiated=0.0;
volatile float out_min = -8000000.0, out_max = 8000000.0;
volatile float input=0.0, output=0.0;*/

volatile PID pid1 = PID_DEFAULTS;
volatile float uk; // control
volatile float rk = 0.0f; // reference
volatile float yk = 0.0f; // feedback
volatile float lk = 1.0f; // saturation


//
// epwm2ISR - ePWM 2 ISR
//
__interrupt void epwm2ISR(void)
{
    volatile static int cnt=0;

    //if the conversion was done
    if(ADC_getInterruptStatus(ADCD_BASE, ADC_INT_NUMBER1))
    {
        modbus_holding_regs[CurrSense] = ADC_readResult(ADCDRESULT_BASE, ADC_SOC_NUMBER0)*3000/4096;
        ADC_clearInterruptStatus(ADCA_BASE, ADC_INT_NUMBER1);
    }

    //heartbeat on led
    if(cnt++>15)
    {
        cnt=0;
        GPIO_togglePin(DEVICE_GPIO_PIN_LED1);
    }

    //
    // PID here
    //
    pid1.Kp = (float)modbus_holding_regs[Kp]*512.0f;
    pid1.Ki = (float)modbus_holding_regs[Ki] / 1000.0f;
    pid1.Kd = (float)modbus_holding_regs[Kd] * 128.0f;

    float cable_length = (float) EQEP_getPosition(EQEP1_BASE);
    cable_length = cable_length*47.124f/32.0f/120.0f;
    modbus_holding_regs[Current_Encoder_Count] = (int) cable_length;

    rk = ((float)modbus_holding_regs[PID_Setpoint]);
    yk = cable_length;
    uk = DCL_runPID(&pid1, rk, yk, lk);
    bidirectional_motor((signed long) uk);

    modbus_holding_regs[Current_PWM] = (int)(uk/16777215.0f*100.0f);



    //if a full 32-pulse was received (i.e. one full motor revolution has happened)
    if((EQEP_getStatus(EQEP1_BASE) & EQEP_STS_UNIT_POS_EVNT) != 0)
    {
        //
        // No capture overflow, i.e. if 2 consecutive revolutions happened within 10ms
        //
        if((EQEP_getStatus(EQEP1_BASE) & EQEP_STS_CAP_OVRFLW_ERROR) == 0)
        {
            float rpm = (DEVICE_SYSCLK_FREQ / 128.0) / 2.0 / EQEP_getCapturePeriodLatch(EQEP1_BASE) / 4; // 60 seconds / 120 gearbox_ratio = 2
            modbus_holding_regs[Current_RPM] = (int) rpm;
        }


        //
        // Clear unit position event flag and overflow error flag
        //
        EQEP_clearStatus(EQEP1_BASE, (EQEP_STS_UNIT_POS_EVNT |
                                      EQEP_STS_CAP_OVRFLW_ERROR));
    }
    else
    {
        modbus_holding_regs[Current_RPM] = 0;
    }


/*
    input = (float) EQEP_getPositionLatch(EQEP1_BASE);

    //<Proportional>
    error = setpoint - input;
    output = kp*error;
    //</Proportional>

    //<Integration>
    error_integrated += error;

    //preventing integrator windup
    error_integrated = error_integrated > out_max ? out_max : error_integrated;
    error_integrated = error_integrated < out_min ? out_min : error_integrated;

    //reseting integrator
    if(ki == 0.0)
        error_integrated = 0.0;

    output += ki/1000.0*error_integrated; //added divide by 1000 to allow for fractional math
    //</Integration>

    //<Differentiation> (“Derivative on Measurement”)
    input_differentiated = input - input_previous;
    input_previous = input;

    output -= kd * input_differentiated;
    //</Differentiation>

    //output clamp
    output = output > out_max ? out_max : output;
    output = output < out_min ? out_min : output;

    bidirectional_motor((signed long) output);
*/

    //
    // Clear INT flag for this timer
    //
    EPWM_clearEventTriggerInterruptFlag(EPWM2_BASE);

    //
    // Acknowledge interrupt group
    //
    Interrupt_clearACKGroup(INTERRUPT_ACK_GROUP3);
}




//
// sciaTXFIFOISR - SCIA Transmit FIFO ISR
//
__interrupt void sciaTXFIFOISR(void)
{
    buffered_serial_transmit();

    SCI_clearInterruptStatus(SCIA_BASE, SCI_INT_TXFF);

    //
    // Issue PIE ACK
    //
    Interrupt_clearACKGroup(INTERRUPT_ACK_GROUP9);
}

//
// sciaRXFIFOISR - SCIA Receive FIFO ISR
//
__interrupt void sciaRXFIFOISR(void)
{
    buffered_serial_receive();

    SCI_clearOverflowStatus(SCIA_BASE);

    SCI_clearInterruptStatus(SCIA_BASE, SCI_INT_RXFF);

    //
    // Issue PIE ack
    //
    Interrupt_clearACKGroup(INTERRUPT_ACK_GROUP9);
}
