/*
 * buffered_serial.c
 *
 *  Created on: 15 Feb 2018
 *      Author: AfdhalAtiffTan
 */


#include "buffered_serial.h"

// static data
#define EUSART_TX_BUFFER_SIZE 46
static char eusartTxHead = 0;
static char eusartTxTail = 0;
static char eusartTxBuffer[EUSART_TX_BUFFER_SIZE];
volatile char eusartTxBufferRemaining;


static char _receive_buffer[MAX_BUFF];
static volatile char _receive_buffer_tail=0;
static volatile char _receive_buffer_head=0;

void buffered_serial_write(char c)
{
    SCI_writeCharBlockingFIFO(SCIA_BASE, c);
}

char buffered_serial_read()
{
    // Empty buffer?
    if (_receive_buffer_head == _receive_buffer_tail)
      return -1;

    // Read from "head"
    char d = _receive_buffer[_receive_buffer_head]; // grab next byte
    _receive_buffer_head = (_receive_buffer_head + 1) % MAX_BUFF;
    return d;
}

char buffered_serial_available()
{
    return (_receive_buffer_tail + MAX_BUFF - _receive_buffer_head) % MAX_BUFF;
}

void buffered_serial_flush()
{
}


//inspired by arduino softserial library
void buffered_serial_receive()
{
    // if buffer full, set the overflow flag and return
    char next = (_receive_buffer_tail + 1) % MAX_BUFF;
    if (next != _receive_buffer_head)
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = SCI_readCharNonBlocking(SCIA_BASE); // save new byte
      _receive_buffer_tail = next;
    }

}

//inspired by microchip mcc usart driver
void buffered_serial_transmit()
{
    while(0 == eusartTxBufferRemaining)
    {
    }

    if(0 == PIE3bits.TXIE)
    {
        TX1REG = txData;
    }
    else
    {
        PIE3bits.TXIE = 0;
        eusartTxBuffer[eusartTxHead++] = txData;
        if(sizeof(eusartTxBuffer) <= eusartTxHead)
        {
            eusartTxHead = 0;
        }
        eusartTxBufferRemaining--;
    }
    PIE3bits.TXIE = 1;
}
