/*
 * autonomous_mode.c
 *
 *  Created on: 16 May 2018
 *      Author: AfdhalAtiffTan
 */

#include "autonomous_mode.h"


//this function will only update the target setpoint in the hreg
void waypoint_follower()
{
    static length4_struct target_cable_lengths;
    static XYZ_coord_struct target_point;
    
    if (modbus_holding_regs[Current_Waypoints_Pointer] < modbus_holding_regs[Number_of_Waypoints])
    {
        modbus_holding_regs[Target_X] = waypoints(modbus_holding_regs[Current_Waypoints_Pointer], 0);
        modbus_holding_regs[Target_Y] = waypoints(modbus_holding_regs[Current_Waypoints_Pointer], 1);
        modbus_holding_regs[Target_Z] = waypoints(modbus_holding_regs[Current_Waypoints_Pointer], 2);

        //update target length
        target_cable_lengths = XYZ_to_length4(  (float) modbus_holding_regs[Target_X], 
                                                (float) modbus_holding_regs[Target_Y], 
                                                (float) modbus_holding_regs[Target_Z], 
                                                (float) modbus_holding_regs[Field_Length]);

        modbus_holding_regs[Target_Length_Winch0] = target_cable_lengths.lengtha;
        modbus_holding_regs[Target_Length_Winch1] = target_cable_lengths.lengthb;
        modbus_holding_regs[Target_Length_Winch2] = target_cable_lengths.lengthc;
        modbus_holding_regs[Target_Length_Winch3] = target_cable_lengths.lengthd;

        switch(modbus_holding_regs[Winch_ID])
        {
            case 0:
            {
                modbus_holding_regs[Target_Setpoint] = target_cable_lengths.lengtha;
                break;
            }
            case 1:
            {
                modbus_holding_regs[Target_Setpoint] = target_cable_lengths.lengthb;
                break;
            }
            case 2:
            {
                modbus_holding_regs[Target_Setpoint] = target_cable_lengths.lengthc;
                break;
            }
            case 3:
            {
                modbus_holding_regs[Target_Setpoint] = target_cable_lengths.lengthd;
                break;
            }
        }        
        
        if(modbus_holding_regs[tether_reached_target])
        {
            static uint32_t timestamp;

            if (modbus_holding_regs[Current_Waypoints_Pointer] == 0)
                timestamp = systick();

            if (systick() - timestamp > (5000*(uint32_t)modbus_holding_regs[Dwell_Time]))
            {
                modbus_holding_regs[Current_Waypoints_Pointer]+=1;
                timestamp = systick();
            }
        }               
    }
    else
    {
        modbus_holding_regs[Follow_Waypoints] = 0;
        modbus_holding_regs[Current_Waypoints_Pointer] = 0;
    }
}

